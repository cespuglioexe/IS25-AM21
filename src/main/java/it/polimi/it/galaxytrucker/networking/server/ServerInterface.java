package it.polimi.it.galaxytrucker.networking.server;

import it.polimi.it.galaxytrucker.controller.Controller;
import it.polimi.it.galaxytrucker.controller.GenericGameData;
import it.polimi.it.galaxytrucker.exceptions.GameFullException;
import it.polimi.it.galaxytrucker.model.utility.Color;

import java.io.Serializable;
import java.util.List;
import java.util.UUID;

/**
 * Defines the interface for server-side operations that are exposed to the
 * {@link ClientHandler} instances. This interface abstracts the core
 * server functionalities related to managing games and clients, allowing
 * different communication technologies (like RMI or Sockets) to interact
 * with the server logic through a common set of methods.
 *
 * @author giacomoamaducci
 * @version 1.0
 */
public interface ServerInterface {
    /**
     * Requests the controllers for all active games connected to the server.
     * <p>
     *     As {@link Controller} does not implement {@link Serializable}, the return
     *     value of this function is a list of {@link GenericGameData}. Each {@link GenericGameData}
     *     object contains information about the controlled game like active players,
     *     maximum player number, and the games {@code UUID}.
     * </p>
     *
     * @return al {@code List<GenericGameData>} with information about all active controllers.
     */
    List<GenericGameData> getActiveGames();

    /**
     * Requests the server to set the username for a connected client.
     *
     * @param client the handler for the player wanting to join the game.
     * @param username the {@code String} representing the username the player wants to use.
     * @return {@code true} if the name is set successfully or {@code false} if the name
     * is already in use by another client.
     */
    boolean setUsername(ClientHandler client, String username);

    /**
     * Requests the server to add a player to an active game. When the player is
     * added successfully, the {@code UUID} generated for that player is returned
     * to the caller.
     *
     * @param client the handler for the player wanting to join the game.
     * @param gameId the {@code UUID} of the game the player wants to join.
     * @return the {@code UUID} generated by the server for the player.
     */
    void addPlayerToGame(ClientHandler client, UUID gameId) throws GameFullException;

    /**
     * Requests the server to create a new game. When the game is successfully
     * created, the {@code UUID} generated for it is returned to the caller.
     *
     * @param players the number of players required for the game to start.
     * @param level the level of the game.
     * @return the {@code UUID} generated by the server for the newly created game.
     */
    UUID createNewGame(int players, int level);
}
