 private int line,index;

        public Pirates(Optional partecipants, Optional penalty, Optional flightDayPenalty, Optional reward, int firePowerRequired,int creditRreward, AdventureDeck deck, Map<Projectile, Direction> projectiles) {
                super(partecipants, penalty, flightDayPenalty, reward, firePowerRequired,creditRreward, deck, projectiles);
        }



        @Override
        public void meteorStorm(Player player, int line, Map.Entry<Projectile, Direction> projectiles) {

        }

        public void takeRewards(Player player) {
                giveCreditReward(super.getCreditReward(),player);
                applyFlightDayPenalty((Integer) super.getFlightDayPenalty().orElse(0), player);
        }

        public void checkConditions(Player player){
                if (player.getShipManager().calculateFirePower() < super.getFirePowerRequired()){
                        attack(player,);
                }
        }


        @Override
        public void play() {

        }


        @Override
        public void applyFlightDayPenalty(int penalty, Player player) {
                //metodo che fa andare indietro il giocatore

        }

        @Override
        public void giveCreditReward(int reward, Player player) {
                player.addCredits(reward);
        }

        @Override
        public void attack(Player player, Set<List<Integer>> listaScudi) {
                Map<Projectile, Direction> cannonate = getProjectiles();
                List<Optional<ComponentTile>> sequence;

                index= 4;

                for(Map.Entry<Projectile, Direction> entry : cannonate.entrySet()) {
                        System.out.println(entry.getKey() + " " + entry.getValue());
                        //per ogni proiettile tira il dado per vedere in che colonna/riga si trova
                        line = super.rollDice();

                        //recupera la colonna/riga in cui c'è il proiettile
                        if (entry.getValue() == Direction.UP || entry.getValue() == Direction.DOWN) {
                                sequence = player.getShipManager().getComponentsAtColumn(line);
                        } else {
                                sequence = player.getShipManager().getComponentsAtRow(line);
                        }

                        //trovo l'indice del primo pezzo che verrà colpito
                        for (Optional<ComponentTile> c : sequence) {
                                if (c.isPresent()) {
                                        break;
                                }
                                index++;
                        }

                        // in base alla grandezza del proiettile ho 2 comportamenti diversi
                        if (entry.getKey() == Projectile.SMALL) {

                                if(entry.getValue()==Direction.UP||entry.getValue()==Direction.DOWN){
                                        player.getShipManager().removeComponentTile(index,line);
                                }else {
                                        player.getShipManager().removeComponentTile(line,index);
                                }


                        }else {//il proiettile è di tipo big quindi subisci danno in ogni caso
                                if(entry.getValue()==Direction.UP||entry.getValue()==Direction.DOWN){
                                        player.getShipManager().removeComponentTile(index,line);
                                }else {
                                        player.getShipManager().removeComponentTile(line,index);
                                }
                        }

                }

        }

        public void activateShield(Player player, int row, int col){
                player.getShipManager().removeBattery(row,col);
        }

        public boolean gestioneProiettili(Player player,Map.Entry<Projectile, Direction> projectile) {
                /*List<ComponentTile> listScudi = null;
                List<Shield> shield = null;
                Set<List<Integer>> posizioniScudi = player.getShipManager().getAllComponentsPositionOfType(Shield.class);
                for (List<Integer> liste:posizioniScudi) {
                        listScudi = player.getShipManager().getComponent(liste.getFirst(),liste.get(1)).stream().toList();
                }
                //trasformo la lista di componenti in lista di scudi
                for (int i=0;i<listScudi.size();i++){
                        shield.add((Shield) listScudi.get(i));
                }

                //controllo se ci sono scudi orientati correttamente
                for(Shield s: shield){
                        if(s.getOrientation()==entry.getValue()||Direction.values()[(s.getOrientation().ordinal()+1)%4]==entry.getValue()){
                                return true;
                        }
                }*/

                if (projectile.getKey().equals(Projectile.SMALL)){
                        checkShield();
                }else{
                        removeComponent(
                }
                return false;

        }

        public void removeComponent(int row,int column){

        }